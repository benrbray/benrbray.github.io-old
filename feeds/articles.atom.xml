<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Benjamin R. Bray - articles</title><link href="https://benrbray.com/" rel="alternate"></link><link href="http://localhost:8000/feeds/articles.atom.xml" rel="self"></link><id>https://benrbray.com/</id><updated>2020-03-18T00:00:00-04:00</updated><entry><title>Collision Detection: Convex Geometry</title><link href="https://benrbray.com/posts/2020/collision-detection-convex-geometry" rel="alternate"></link><published>2020-03-18T00:00:00-04:00</published><updated>2020-03-18T00:00:00-04:00</updated><author><name>Benjamin R. Bray</name></author><id>tag:benrbray.com,2020-03-18:/posts/2020/collision-detection-convex-geometry</id><summary type="html">Working with convex polygons.</summary><content type="html">

&lt;script src="/static/geom/dist/index.js"&gt;&lt;/script&gt;

&lt;style&gt;
.edge {
	stroke: #00f;
}
.pending {
	stroke-dasharray: 4,4;
	stroke-width: 4;
	animation: dash 0.5s linear infinite;
}

@keyframes dash {
	0% { stroke-dashoffset: 0; }
	100%{ stroke-dashoffset: 8; }
}
&lt;/style&gt;

&lt;div id="fig1" style="border: 1px solid gray"&gt;&lt;/div&gt;

&lt;svg viewbox="0 0 500 150" xmlns="http://www.w3.org/2000/svg"&gt;
    &lt;defs&gt;
        &lt;lineargradient id="Gradient-1"&gt;
            &lt;stop offset="0%" stop-color="#bbc42a" /&gt;
            &lt;stop offset="100%" stop-color="#765373" /&gt;
        &lt;/lineargradient&gt;
    &lt;/defs&gt;
    &lt;rect x="10" y="10" width="200" height="100" fill="url(#Gradient-1)" stroke="#333333" stroke-width="3px" /&gt;
		&lt;rect x="240" y="10" width="200" height="100" stroke-linejoin="round" stroke-dasharray="8,4" stroke-width="2" stroke="#000000" fill="none" /&gt;
&lt;/svg&gt;

# Geom Demo
# Algorithms for Convex Geometry

Convex and Affine Sets

* Separating Hyperplane Theorem
* Supporting Hyperplane Theorem

Convex Polygons

* Determine if sequence of vertices represents a convex polygon?
* Point inside convex polygon?
* Barycentric Coordinates
	* Screen Space and the PS2

Convex Primitives

* Lines and Planes
* Simplex

Convex Hull

* Compute Convex Hulls
	* Gift Wrapping Algorithm
	* Graham Scan
	* Quickhull
	* Chan's Algorithm
* Convex Hull of a Simple Polygon

Cutting Shapes

# Duality

* Support Functions
* Fenchel Conjugate
* Representing Convex Shapes with Support Functions

# Collision Detection

Simple Collisions

* Line-Line 
* Ball-Line (bouncing ball demo)
* Ball-Ball
* Rect-Rect
* Ball-Rect

Principled Collision Detection

</content><category term="geometry"></category><category term="linear-algebra"></category><category term="game-dev"></category><category term="graphics"></category></entry><entry><title>Collision Detection: GJK &amp; EPA</title><link href="https://benrbray.com/posts/2020/collision-detection-gjk-epa" rel="alternate"></link><published>2020-03-18T00:00:00-04:00</published><updated>2020-03-18T00:00:00-04:00</updated><author><name>Benjamin R. Bray</name></author><id>tag:benrbray.com,2020-03-18:/posts/2020/collision-detection-gjk-epa</id><content type="html">&lt;p&gt;The Gilbert–Johnson–Keerthi distance algorithm is a method of determining the minimum distance between two convex sets. Unlike many other distance algorithms, it does not require that the geometry data be stored in any specific format, but instead relies solely on a support function to iteratively generate closer simplices to the correct answer using the configuration space obstacle (CSO) of two convex shapes, more commonly known as the Minkowski difference.&lt;/p&gt;</content><category term="geometry"></category><category term="linear-algebra"></category><category term="game-dev"></category><category term="graphics"></category></entry><entry><title>SVG</title><link href="https://benrbray.com/posts/2020/svg" rel="alternate"></link><published>2020-03-03T00:00:00-05:00</published><updated>2020-03-03T00:00:00-05:00</updated><author><name>Benjamin R. Bray</name></author><id>tag:benrbray.com,2020-03-03:/posts/2020/svg</id><summary type="html">&lt;p&gt;What I've learned about the Scalable Vector Graphics (SVG) format.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Guides&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Joni Trythall, &lt;a href="https://svgpocketguide.com/book/"&gt;SVG Pocket Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Libraries&lt;/h1&gt;
&lt;h3&gt;&lt;a href="https://svgjs.com/docs/3.0/"&gt;&lt;code&gt;SVG.js&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;div id="container-svgjs"&gt;&lt;/div&gt;

&lt;script src="https://cdn.jsdelivr.net/npm/@svgdotjs/svg.js@3.0/dist/svg.min.js"&gt;&lt;/script&gt;

&lt;script type="module"&gt;
let container = document.getElementById("container-svgjs");
var draw = SVG().addTo(container).size(300, 300)
var rect = draw.rect(100, 100).attr({ fill: '#f06' })
&lt;/script&gt;

&lt;h3&gt;&lt;a href="http://raphaeljs.com/"&gt;&lt;code&gt;Raphael&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div id="container"&gt;&lt;/div&gt;

&lt;script src="http://cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js"&gt; &lt;/script&gt;

&lt;p&gt;&lt;script&gt; 
let container = document.getElementById("container");
var paper = Raphael(container, 500, 300); 
var dot = paper.circle(250, 150, 30).attr({ 
fill: "#FFF", 
stroke: "#000", 
"stroke-width": 1 
}); 
&lt;/script&gt;&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;Paper.js&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The "swiss army knife" of Vector Graphics Scripting&lt;/li&gt;
&lt;li&gt;Runs on top of HTML5 Canvas&lt;/li&gt;
&lt;li&gt;Scene Graph / Document Object Model for vector graphics: Work with nested layers, groups, paths, compound paths, rasters, symbols etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="http://snapsvg.io/"&gt;&lt;code&gt;Snap.svg&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h1&gt;Neat Examples&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Here Dragons Abound, &lt;a href="https://heredragonsabound.blogspot.com/2020/02/creating-pencil-effect-in-svg.html"&gt;Pencil Effect in SVG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Choc, &lt;a href="https://www.newline.co/choc/"&gt;Traceable Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="svg"></category><category term="drawing"></category></entry><entry><title>Collision Detection: Minkowski Sum</title><link href="https://benrbray.com/posts/2018/collision-detection-minkowski-sum" rel="alternate"></link><published>2018-04-27T00:00:00-04:00</published><updated>2018-04-27T00:00:00-04:00</updated><author><name>Benjamin R. Bray</name></author><id>tag:benrbray.com,2018-04-27:/posts/2018/collision-detection-minkowski-sum</id><summary type="html">&lt;p&gt;Introduces the Minkowski sum and its applications to game physics.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Convex Geometry&lt;/h1&gt;
&lt;h1&gt;Minkowski Sum&lt;/h1&gt;</content><category term="geometry"></category><category term="linear-algebra"></category><category term="game-dev"></category><category term="graphics"></category></entry><entry><title>Collision Detection: Separating Axis Theorem</title><link href="https://benrbray.com/posts/2017/collision-detection-separating-axis-theorem" rel="alternate"></link><published>2017-06-17T00:00:00-04:00</published><updated>2017-06-17T00:00:00-04:00</updated><author><name>Benjamin R. Bray</name></author><id>tag:benrbray.com,2017-06-17:/posts/2017/collision-detection-separating-axis-theorem</id><content type="html">&lt;p&gt;In geometry, the hyperplane separation theorem is a theorem about disjoint convex sets in n-dimensional Euclidean space. There are several rather similar versions. In one version of the theorem, if both these sets are closed and at least one of them is compact, then there is a hyperplane in between them and even two parallel hyperplanes in between them separated by a gap. In another version, if both disjoint convex sets are open, then there is a hyperplane in between them, but not necessarily any gap. An axis which is orthogonal to a separating hyperplane is a separating axis, because the orthogonal projections of the convex bodies onto the axis are disjoint.&lt;/p&gt;</content><category term="geometry"></category><category term="linear-algebra"></category><category term="game-dev"></category><category term="graphics"></category></entry></feed>